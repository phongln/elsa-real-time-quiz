// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Score is an object representing the database table.
type Score struct {
	UserID int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	QuizID int `boil:"quiz_id" json:"quiz_id" toml:"quiz_id" yaml:"quiz_id"`
	Score  int `boil:"score" json:"score" toml:"score" yaml:"score"`

	R *scoreR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scoreL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScoreColumns = struct {
	UserID string
	QuizID string
	Score  string
}{
	UserID: "user_id",
	QuizID: "quiz_id",
	Score:  "score",
}

var ScoreTableColumns = struct {
	UserID string
	QuizID string
	Score  string
}{
	UserID: "scores.user_id",
	QuizID: "scores.quiz_id",
	Score:  "scores.score",
}

// Generated where

var ScoreWhere = struct {
	UserID whereHelperint
	QuizID whereHelperint
	Score  whereHelperint
}{
	UserID: whereHelperint{field: "`scores`.`user_id`"},
	QuizID: whereHelperint{field: "`scores`.`quiz_id`"},
	Score:  whereHelperint{field: "`scores`.`score`"},
}

// ScoreRels is where relationship names are stored.
var ScoreRels = struct {
	User string
	Quiz string
}{
	User: "User",
	Quiz: "Quiz",
}

// scoreR is where relationships are stored.
type scoreR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
	Quiz *Quiz `boil:"Quiz" json:"Quiz" toml:"Quiz" yaml:"Quiz"`
}

// NewStruct creates a new relationship struct
func (*scoreR) NewStruct() *scoreR {
	return &scoreR{}
}

func (r *scoreR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *scoreR) GetQuiz() *Quiz {
	if r == nil {
		return nil
	}
	return r.Quiz
}

// scoreL is where Load methods for each relationship are stored.
type scoreL struct{}

var (
	scoreAllColumns            = []string{"user_id", "quiz_id", "score"}
	scoreColumnsWithoutDefault = []string{"user_id", "quiz_id", "score"}
	scoreColumnsWithDefault    = []string{}
	scorePrimaryKeyColumns     = []string{"user_id", "quiz_id"}
	scoreGeneratedColumns      = []string{}
)

type (
	// ScoreSlice is an alias for a slice of pointers to Score.
	// This should almost always be used instead of []Score.
	ScoreSlice []*Score

	scoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scoreType                 = reflect.TypeOf(&Score{})
	scoreMapping              = queries.MakeStructMapping(scoreType)
	scorePrimaryKeyMapping, _ = queries.BindMapping(scoreType, scoreMapping, scorePrimaryKeyColumns)
	scoreInsertCacheMut       sync.RWMutex
	scoreInsertCache          = make(map[string]insertCache)
	scoreUpdateCacheMut       sync.RWMutex
	scoreUpdateCache          = make(map[string]updateCache)
	scoreUpsertCacheMut       sync.RWMutex
	scoreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single score record from the query.
func (q scoreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Score, error) {
	o := &Score{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for scores")
	}

	return o, nil
}

// All returns all Score records from the query.
func (q scoreQuery) All(ctx context.Context, exec boil.ContextExecutor) (ScoreSlice, error) {
	var o []*Score

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Score slice")
	}

	return o, nil
}

// Count returns the count of all Score records in the query.
func (q scoreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count scores rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q scoreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if scores exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Score) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Quiz pointed to by the foreign key.
func (o *Score) Quiz(mods ...qm.QueryMod) quizQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.QuizID),
	}

	queryMods = append(queryMods, mods...)

	return Quizzes(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scoreL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScore interface{}, mods queries.Applicator) error {
	var slice []*Score
	var object *Score

	if singular {
		var ok bool
		object, ok = maybeScore.(*Score)
		if !ok {
			object = new(Score)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeScore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeScore))
			}
		}
	} else {
		s, ok := maybeScore.(*[]*Score)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeScore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeScore))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &scoreR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scoreR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Scores = append(foreign.R.Scores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Scores = append(foreign.R.Scores, local)
				break
			}
		}
	}

	return nil
}

// LoadQuiz allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scoreL) LoadQuiz(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScore interface{}, mods queries.Applicator) error {
	var slice []*Score
	var object *Score

	if singular {
		var ok bool
		object, ok = maybeScore.(*Score)
		if !ok {
			object = new(Score)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeScore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeScore))
			}
		}
	} else {
		s, ok := maybeScore.(*[]*Score)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeScore)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeScore))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &scoreR{}
		}
		args[object.QuizID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scoreR{}
			}

			args[obj.QuizID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`quizzes`),
		qm.WhereIn(`quizzes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Quiz")
	}

	var resultSlice []*Quiz
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Quiz")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for quizzes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quizzes")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Quiz = foreign
		if foreign.R == nil {
			foreign.R = &quizR{}
		}
		foreign.R.Scores = append(foreign.R.Scores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuizID == foreign.ID {
				local.R.Quiz = foreign
				if foreign.R == nil {
					foreign.R = &quizR{}
				}
				foreign.R.Scores = append(foreign.R.Scores, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the score to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Scores.
func (o *Score) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `scores` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, scorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.QuizID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &scoreR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Scores: ScoreSlice{o},
		}
	} else {
		related.R.Scores = append(related.R.Scores, o)
	}

	return nil
}

// SetQuiz of the score to the related item.
// Sets o.R.Quiz to related.
// Adds o to related.R.Scores.
func (o *Score) SetQuiz(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Quiz) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `scores` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"quiz_id"}),
		strmangle.WhereClause("`", "`", 0, scorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.QuizID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuizID = related.ID
	if o.R == nil {
		o.R = &scoreR{
			Quiz: related,
		}
	} else {
		o.R.Quiz = related
	}

	if related.R == nil {
		related.R = &quizR{
			Scores: ScoreSlice{o},
		}
	} else {
		related.R.Scores = append(related.R.Scores, o)
	}

	return nil
}

// Scores retrieves all the records using an executor.
func Scores(mods ...qm.QueryMod) scoreQuery {
	mods = append(mods, qm.From("`scores`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`scores`.*"})
	}

	return scoreQuery{q}
}

// FindScore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindScore(ctx context.Context, exec boil.ContextExecutor, userID int, quizID int, selectCols ...string) (*Score, error) {
	scoreObj := &Score{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `scores` where `user_id`=? AND `quiz_id`=?", sel,
	)

	q := queries.Raw(query, userID, quizID)

	err := q.Bind(ctx, exec, scoreObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from scores")
	}

	return scoreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Score) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no scores provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(scoreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	scoreInsertCacheMut.RLock()
	cache, cached := scoreInsertCache[key]
	scoreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			scoreAllColumns,
			scoreColumnsWithDefault,
			scoreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(scoreType, scoreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scoreType, scoreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `scores` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `scores` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `scores` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, scorePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into scores")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserID,
		o.QuizID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for scores")
	}

CacheNoHooks:
	if !cached {
		scoreInsertCacheMut.Lock()
		scoreInsertCache[key] = cache
		scoreInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Score.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Score) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	scoreUpdateCacheMut.RLock()
	cache, cached := scoreUpdateCache[key]
	scoreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			scoreAllColumns,
			scorePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update scores, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `scores` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, scorePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scoreType, scoreMapping, append(wl, scorePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update scores row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for scores")
	}

	if !cached {
		scoreUpdateCacheMut.Lock()
		scoreUpdateCache[key] = cache
		scoreUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q scoreQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for scores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for scores")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScoreSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `scores` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, scorePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in score slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all score")
	}
	return rowsAff, nil
}

var mySQLScoreUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Score) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no scores provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(scoreColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLScoreUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scoreUpsertCacheMut.RLock()
	cache, cached := scoreUpsertCache[key]
	scoreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			scoreAllColumns,
			scoreColumnsWithDefault,
			scoreColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			scoreAllColumns,
			scorePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert scores, could not build update column list")
		}

		ret := strmangle.SetComplement(scoreAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`scores`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `scores` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(scoreType, scoreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scoreType, scoreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for scores")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(scoreType, scoreMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for scores")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for scores")
	}

CacheNoHooks:
	if !cached {
		scoreUpsertCacheMut.Lock()
		scoreUpsertCache[key] = cache
		scoreUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Score record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Score) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Score provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), scorePrimaryKeyMapping)
	sql := "DELETE FROM `scores` WHERE `user_id`=? AND `quiz_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from scores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for scores")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q scoreQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no scoreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from scores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for scores")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScoreSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `scores` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, scorePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from score slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for scores")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Score) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindScore(ctx, exec, o.UserID, o.QuizID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScoreSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `scores`.* FROM `scores` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, scorePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ScoreSlice")
	}

	*o = slice

	return nil
}

// ScoreExists checks if the Score row exists.
func ScoreExists(ctx context.Context, exec boil.ContextExecutor, userID int, quizID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `scores` where `user_id`=? AND `quiz_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, quizID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, quizID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if scores exists")
	}

	return exists, nil
}

// Exists checks if the Score row exists.
func (o *Score) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ScoreExists(ctx, exec, o.UserID, o.QuizID)
}
